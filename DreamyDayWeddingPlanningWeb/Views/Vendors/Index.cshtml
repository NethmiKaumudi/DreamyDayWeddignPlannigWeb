@model IEnumerable<DreamyDayWeddingPlanningWeb.Models.Vendor>

@{
    ViewData["Title"] = "Vendor Catalog - DreamyDay";
    Layout = "~/Views/Shared/_CoupleLayout.cshtml";
}

<section class="vendor-catalog">
    <h1 style="font-size: 24px; margin-bottom: 20px; color: #333;">Vendor Catalog</h1>

 @foreach (var category in Model.GroupBy(v => v.Category))
    {
        <div class="category mb-5">
            <h3 class="mb-3" style="font-size: 20px; color: #007bff;">@category.Key</h3>
            <div class="row">
                @foreach (var vendor in category)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@vendor.Name</h5>
                                <p class="card-text"><strong>Price:</strong> LKR @vendor.Price.ToString("N2")</p>
                                <p class="card-text"><strong>Description:</strong> @vendor.Description</p>
                                <p class="card-text"><strong>Reviews:</strong> @vendor.Reviews</p>
                                @if (vendor.IsBooked)
                                {
                                    <button class="btn btn-secondary btn-sm" disabled>Booked</button>
                                    <button class="btn btn-danger btn-sm cancel-vendor" data-vendor-id="@vendor.Id" data-vendor-name="@vendor.Name">Cancel Booking</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary btn-sm book-vendor" data-vendor-id="@vendor.Id" data-vendor-name="@vendor.Name">Book Vendor</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- One Booked Vendor Per Category -->
    <hr />
    <h2 class="mt-5">Booked Vendors </h2>
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>Category</th>
                <th>Name</th>
                <th>Price (LKR)</th>
                <th>Description</th>
                <th>Reviews</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @{
                var bookedVendorsPerCategory = Model
                    .Where(v => v.IsBooked)
                    .GroupBy(v => v.Category)
                    .Select(g => g.First())
                    .ToList();

                // Hardcoded vendor per category
                var hardcodedVendors = new List<DreamyDayWeddingPlanningWeb.Models.Vendor>
                {
                    new DreamyDayWeddingPlanningWeb.Models.Vendor
                    {
                        Category = "Photography",
                        Name = "ShutterPro Photography",
                        Price = 15000,
                        Description = "Professional photography for weddings.",
                        Reviews = "5 stars",
                        IsBooked = true,
                        Id = 999
                    },
                    new DreamyDayWeddingPlanningWeb.Models.Vendor
                    {
                        Category = "Catering",
                        Name = "Gourmet Catering",
                        Price = 20000,
                        Description = "Exclusive wedding catering services.",
                        Reviews = "4.5 stars",
                        IsBooked = true,
                        Id = 1000
                    },
                    // Add other hardcoded vendors for other categories here if necessary
                };

                // Merge hardcoded vendors with the booked vendors from the database
                bookedVendorsPerCategory.AddRange(hardcodedVendors);

                if (bookedVendorsPerCategory.Any())
                {
                    foreach (var vendor in bookedVendorsPerCategory)
                    {
                        <tr>
                            <td>@vendor.Category</td>
                            <td>@vendor.Name</td>
                            <td>LKR @vendor.Price.ToString("N2")</td>
                            <td>@vendor.Description</td>
                            <td>@vendor.Reviews</td>
                            <td>Booked</td>
                            <td>
                                <button class="btn btn-danger btn-sm cancel-vendor" data-vendor-id="@vendor.Id" data-vendor-name="@vendor.Name">Cancel</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center">No vendors booked yet.</td>
                    </tr>
                }
            }

        </tbody>
    </table>
</section>

<style>
    .vendor-catalog {
        background: linear-gradient(to bottom, #E2E8F0, #fff);
        padding: 20px;
        height: calc(100vh - 100px);
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .category {
        width: 100%;
        max-width: 1200px;
    }

    .card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }

        .card:hover {
            transform: translateY(-5px);
        }

    .card-title {
        color: #007bff;
        font-weight: 600;
        font-size: 1.25rem;
    }

    .card-text {
        color: #555;
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        padding: 8px 15px;
        color: #fff;
        border-radius: 5px;
        font-size: 0.9rem;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        padding: 8px 15px;
        color: #fff;
        border-radius: 5px;
        font-size: 0.9rem;
    }

    .btn-danger {
        background-color: #dc3545;
        border: none;
        padding: 8px 15px;
        color: #fff;
        border-radius: 5px;
        font-size: 0.9rem;
    }

        .btn-danger:hover {
            background-color: #b02a37;
        }

    .row {
        margin-left: -10px;
        margin-right: -10px;
    }

    .col-md-4 {
        padding-left: 10px;
        padding-right: 10px;
    }

    .mb-3 {
        margin-bottom: 15px;
    }

    .mb-5 {
        margin-bottom: 30px;
    }

    .table {
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        max-width: 1200px;
    }

    .table th, .table td {
        vertical-align: middle;
        padding: 12px;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }
</style>

@section Scripts {
    <script>
        // Book Vendor
        document.querySelectorAll('.book-vendor').forEach(button => {
            button.addEventListener('click', function () {
                const vendorId = this.getAttribute('data-vendor-id');
                const vendorName = this.getAttribute('data-vendor-name');

                fetch('@Url.Action("BookVendor", "Vendors")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ vendorId: parseInt(vendorId) })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(`Vendor "${vendorName}" booked successfully!`);
                            window.location.reload();
                        } else {
                            alert('Error: ' + data.message);
                        }
                    })
                    .catch(error => alert('Error: ' + error));
            });
        });

        // Cancel Vendor
        document.querySelectorAll('.cancel-vendor').forEach(button => {
            button.addEventListener('click', function () {
                const vendorId = this.getAttribute('data-vendor-id');
                const vendorName = this.getAttribute('data-vendor-name');

                if (confirm(`Are you sure you want to cancel the booking for "${vendorName}"?`)) {
                    fetch('@Url.Action("CancelVendor", "Vendors")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ vendorId: parseInt(vendorId) })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert(`Booking for "${vendorName}" cancelled successfully!`);
                                window.location.reload();
                            } else {
                                alert('Error: ' + data.message);
                            }
                        })
                        .catch(error => alert('Error: ' + error));
                }
            });
        });
    </script>

}
